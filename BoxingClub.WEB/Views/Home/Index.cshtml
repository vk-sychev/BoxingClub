@model PageViewModel<BoxingGroupFullViewModel>
@using BoxingClub.Infrastructure.Constants
@{
    ViewData["Title"] = "Index";
    string hasPreviousPage = Model.HasPreviousPage ? "" : "disabled";
    string hasNextPage = Model.HasNextPage ? "" : "disabled";
    var pageSize = ViewBag.pageSize;
}

<div class="d-flex justify-content-between mb-2">
    <h1>Boxing Groups</h1>


    <div>
        <select asp-for="page" class="form-control" asp-items="new SelectList(ViewBag.Sizes, pageSize)"> </select>
        <div class="ml-5">
            <a asp-action="Index" class="btn btn-secondary" asp-controller="Home" asp-route-pageIndex="@(Model.PageIndex)" asp-route-pageSize="@pageSize">View by</a>
        </div>
    </div>


    @if (User.Identity.IsAuthenticated && User.IsInRole(Constants.AdminRoleName))
    {
        <div class="mt-2">
            <a class="btn btn-primary" asp-action="CreateBoxingGroup" asp-controller="Home">Create New Boxing Group</a>
        </div>
    }
</div>

@if (!Model.Items.Any())
{
    <h5> You have no groups yet</h5>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>
                    Group's Name
                </th>
                <th>
                    Full Name
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody id="tableBody">
            @foreach (var item in Model.Items)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.Name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.CoachFullName)
                    </td>
                    @if (User.Identity.IsAuthenticated && User.IsInRole(Constants.AdminRoleName))
                    {
                        <td>
                            <div class="d-flex justify-content-end">
                                @Html.ActionLink("Edit", "EditBoxingGroup", "Home", new { id = item.Id }, new { @class = "btn btn-outline-primary btn-sm px-3" })
                                @Html.ActionLink("Details", "DetailsBoxingGroup", "Home", new { id = item.Id }, new { @class = "btn btn-outline-secondary btn-sm px-3 ml-3" })
                                @Html.ActionLink("Delete", "DeleteBoxingGroup", "Home", new { id = item.Id }, new { @class = "btn btn-outline-danger btn-sm px-3 ml-3" })
                            </div>
                        </td>
                    }
                    else
                    {
                        <td>
                            <div class="d-flex justify-content-end">
                                @Html.ActionLink("Details", "DetailsBoxingGroup", "Home", new { id = item.Id }, new { @class = "btn btn-outline-primary btn-sm px-3" })
                            </div>
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}


<ul class="pagination">
    <li class="page-item @(1 == Model.PageIndex ? "disabled" : "")">
        <a class="page-link" asp-controller="Home" , asp-route-pageIndex="1">1</a>
    </li>

    <li class="page-item @hasPreviousPage">
        <a asp-action="Index" asp-route-pageIndex="@(Model.PageIndex - 1)" class="page-link">Previous</a>
    </li>

    @if (Model.TotalPages != 0)
    {
        @for (int i = Model.StartPage; i <= Model.LastPage; i++)
        {
            <li class="page-item @(i == Model.PageIndex ? "active" : "")">
                <a class="page-link" asp-controller="Home" , asp-route-pageIndex="@i">@i</a>
            </li>
        }
    }

    <li class="page-item @hasNextPage">
        <a asp-action="Index" asp-route-pageIndex="@(Model.PageIndex + 1)" class="page-link">Next</a>
    </li>

    <li class="page-item @(Model.TotalPages == Model.PageIndex ? "disabled" : "")">
        <a class="page-link" asp-controller="Home" , asp-route-pageIndex="@Model.TotalPages">@Model.TotalPages</a>
    </li>
</ul>



