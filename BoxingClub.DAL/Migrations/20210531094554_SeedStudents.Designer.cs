// <auto-generated />
using System;
using BoxingClub.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoxingClub.DAL.Migrations
{
    [DbContext(typeof(BoxingClubContext))]
    [Migration("20210531094554_SeedStudents")]
    partial class SeedStudents
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "291c0120-8c27-47c5-83fe-9d7deb36f73c",
                            ConcurrencyStamp = "77f7d7f2-3955-4651-ad9a-faa4f764dfb3",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6",
                            ConcurrencyStamp = "18d399dc-6a11-4b4f-b20b-3470b3f9ca86",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "db460306-31c6-457a-989e-9e4317be99b9",
                            ConcurrencyStamp = "a6903500-401b-47bc-aca7-c0f9a4a547f7",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8da509ca-2005-457d-8ca3-105792f04013",
                            ConcurrencyStamp = "b8a9302f-fa62-4737-84f4-b3fd1555d364",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "fda7dfec-9828-41b2-bd9c-53dccbef2bb8",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "3a08ff7b-27b8-424b-b555-61ee9420353e",
                            Email = "Manager1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER1@GMAIL.COM",
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEP8doSI/KbTP1UtlKjoSJmxrbUpQvy1PVLm0s6hevD7BwIXH+ZtMzXeLTnmKAMCBzA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e85c8a96-9f4c-42c0-9aff-aebe4f4e324b",
                            TwoFactorEnabled = false,
                            UserName = "Manager1"
                        },
                        new
                        {
                            Id = "2d4254a5-7782-4b9c-a987-42a83d30669a",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "5f587422-96f6-402c-aa73-ecc695828217",
                            Email = "Manager2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER2@GMAIL.COM",
                            NormalizedUserName = "MANAGER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEG2ecNNmFtDDTsis/KpW05CmZc6BUsMOgd9WRL9L+KcqlccEq0o2Xy/eJWS/3xEUPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "811e1203-053b-469e-94c8-dc4b965d91c0",
                            TwoFactorEnabled = false,
                            UserName = "Manager2"
                        },
                        new
                        {
                            Id = "7dc730f1-78ec-41f5-a079-7d5e5d6b39ef",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "eec8c2c5-6327-42ac-8833-51c3d27456ff",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vasya",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEAeNrKDvYLKP50waGzlPFQZVHkJYDG1rajGC0CHEHj6FCwBAwON70xeUr+A+zk43Xw==",
                            Patronymic = "Konstantinovich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4f0d0842-e0de-4df0-83fe-8ad8d87bdeae",
                            Surname = "Sychev",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0889adee-e95c-4472-9095-54f31a016ae2",
                            Description = "CMS in boxing",
                            Email = "Coach1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pavel",
                            NormalizedEmail = "COACH1@GMAIL.COM",
                            NormalizedUserName = "COACH1",
                            PasswordHash = "AQAAAAEAACcQAAAAEN7UsXmZ3W9v4z0eCTn2lc6jrApWxuZpUOEz6yEyW69pnzuVi63fIg/DI74ow+vqdg==",
                            Patronymic = "Nikolayevich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "adda063e-e59a-4e6a-88b6-ab736409e508",
                            Surname = "Dorochin",
                            TwoFactorEnabled = false,
                            UserName = "Coach1"
                        },
                        new
                        {
                            Id = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1991, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e994041d-0a97-4803-9d75-30998101d80f",
                            Description = "CMS in boxing",
                            Email = "Coach2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vlad",
                            NormalizedEmail = "COACH2@GMAIL.COM",
                            NormalizedUserName = "COACH2",
                            PasswordHash = "AQAAAAEAACcQAAAAELMBlXA8fDH1POMy79hQSF9ZdXhhJzdZZV1LlIk62ObdpX7U2AIpE7F55BpR9I7rtw==",
                            Patronymic = "Nikolayevich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5d0ebe8c-0356-4509-9b7f-6ba76c20891d",
                            Surname = "Dorochin",
                            TwoFactorEnabled = false,
                            UserName = "Coach2"
                        },
                        new
                        {
                            Id = "a50a06a5-df07-4728-b6a0-93173c2ce4cf",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1970, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "af2a17f3-4996-4ff4-8d71-12746737406d",
                            Description = "MS in boxing",
                            Email = "Coach3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Sergey",
                            NormalizedEmail = "COACH3@GMAIL.COM",
                            NormalizedUserName = "COACH3",
                            PasswordHash = "AQAAAAEAACcQAAAAELQk6yryMSH3aNsBIUp0mavDI9F22yQKGbWEvZ3C2VuerIzN6vWEOMQHUgALfh3TCg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "cf5315d1-49c9-4432-ac5f-a4d55becc372",
                            Surname = "Goncharov",
                            TwoFactorEnabled = false,
                            UserName = "Coach3"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "7dc730f1-78ec-41f5-a079-7d5e5d6b39ef",
                            RoleId = "291c0120-8c27-47c5-83fe-9d7deb36f73c"
                        },
                        new
                        {
                            UserId = "fda7dfec-9828-41b2-bd9c-53dccbef2bb8",
                            RoleId = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6"
                        },
                        new
                        {
                            UserId = "2d4254a5-7782-4b9c-a987-42a83d30669a",
                            RoleId = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6"
                        },
                        new
                        {
                            UserId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        },
                        new
                        {
                            UserId = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        },
                        new
                        {
                            UserId = "a50a06a5-df07-4728-b6a0-93173c2ce4cf",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("BoxingGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            Name = "Vityaz"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            Name = "Warrior"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            Name = "Sarmat"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.MedicalCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClinicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalCertificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicName = "Polyclinic 4",
                            DateOfIssue = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClinicName = "Polyclinic 4",
                            DateOfIssue = new DateTime(2020, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClinicName = "Polyclinic 13",
                            DateOfIssue = new DateTime(2019, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2018, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClinicName = "Polyclinic 4",
                            DateOfIssue = new DateTime(2020, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 7,
                            ClinicName = "Polyclinic 1",
                            DateOfIssue = new DateTime(2021, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 8,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 4
                        },
                        new
                        {
                            Id = 9,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 5
                        },
                        new
                        {
                            Id = 10,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 6
                        },
                        new
                        {
                            Id = 11,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 7
                        },
                        new
                        {
                            Id = 12,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 8
                        },
                        new
                        {
                            Id = 13,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 9
                        },
                        new
                        {
                            Id = 14,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 10
                        },
                        new
                        {
                            Id = 15,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 11
                        },
                        new
                        {
                            Id = 16,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 12
                        },
                        new
                        {
                            Id = 17,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 13
                        },
                        new
                        {
                            Id = 18,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 14
                        },
                        new
                        {
                            Id = 19,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 15
                        },
                        new
                        {
                            Id = 20,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 16
                        },
                        new
                        {
                            Id = 21,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 17
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BoxingGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFights")
                        .HasColumnType("int");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BoxingGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BornDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2015, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 175,
                            Name = "Vasiliy",
                            NumberOfFights = 3,
                            Patronymic = "Konstantinovich",
                            Surname = "Sychev",
                            Weight = 88.0
                        },
                        new
                        {
                            Id = 2,
                            BornDate = new DateTime(1991, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2014, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 183,
                            Name = "Igor",
                            NumberOfFights = 5,
                            Surname = "Zhuravlev",
                            Weight = 70.0
                        },
                        new
                        {
                            Id = 3,
                            BornDate = new DateTime(2001, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2018, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 170,
                            Name = "Ivan",
                            NumberOfFights = 2,
                            Surname = "Pavlov",
                            Weight = 66.0
                        },
                        new
                        {
                            Id = 4,
                            BornDate = new DateTime(2000, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2013, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 174,
                            Name = "Andrew",
                            NumberOfFights = 10,
                            Patronymic = "Sergeevich",
                            Surname = "Solovyev",
                            Weight = 72.0
                        },
                        new
                        {
                            Id = 5,
                            BornDate = new DateTime(1998, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 3,
                            DateOfEntry = new DateTime(2018, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 165,
                            Name = "Vika",
                            NumberOfFights = 4,
                            Surname = "Zhukova",
                            Weight = 55.0
                        },
                        new
                        {
                            Id = 6,
                            BornDate = new DateTime(2001, 4, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2018, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 172,
                            Name = "Ivan",
                            NumberOfFights = 3,
                            Surname = "Shabanov",
                            Weight = 66.0
                        },
                        new
                        {
                            Id = 7,
                            BornDate = new DateTime(2000, 10, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 3,
                            DateOfEntry = new DateTime(2020, 6, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 175,
                            Name = "Vlad",
                            NumberOfFights = 1,
                            Patronymic = "Sergeevich",
                            Surname = "Safonov",
                            Weight = 74.0
                        },
                        new
                        {
                            Id = 8,
                            BornDate = new DateTime(2000, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2016, 1, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 173,
                            Name = "Anastasia",
                            NumberOfFights = 6,
                            Patronymic = "Antonovna",
                            Surname = "Efimova",
                            Weight = 60.0
                        },
                        new
                        {
                            Id = 9,
                            BornDate = new DateTime(2000, 9, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2020, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 180,
                            Name = "Viktoria",
                            NumberOfFights = 1,
                            Surname = "Narkevich",
                            Weight = 60.0
                        },
                        new
                        {
                            Id = 10,
                            BornDate = new DateTime(2000, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2016, 10, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 178,
                            Name = "Dmitry",
                            NumberOfFights = 4,
                            Patronymic = "Dmitrievich",
                            Surname = "Kustovinov",
                            Weight = 69.0
                        },
                        new
                        {
                            Id = 11,
                            BornDate = new DateTime(1989, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2012, 9, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 166,
                            Name = "Alexey",
                            NumberOfFights = 10,
                            Surname = "Fedorov",
                            Weight = 54.0
                        },
                        new
                        {
                            Id = 12,
                            BornDate = new DateTime(1995, 6, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2017, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 169,
                            Name = "Evgeniy",
                            NumberOfFights = 6,
                            Surname = "Baranin",
                            Weight = 57.0
                        },
                        new
                        {
                            Id = 13,
                            BornDate = new DateTime(2003, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 3,
                            DateOfEntry = new DateTime(2015, 6, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 170,
                            Name = "Alexander",
                            NumberOfFights = 5,
                            Surname = "Kirillov",
                            Weight = 74.0
                        },
                        new
                        {
                            Id = 14,
                            BornDate = new DateTime(2003, 12, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 3,
                            DateOfEntry = new DateTime(2012, 2, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 165,
                            Name = "Nikolay",
                            NumberOfFights = 6,
                            Surname = "Leshev",
                            Weight = 67.0
                        },
                        new
                        {
                            Id = 15,
                            BornDate = new DateTime(2004, 2, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2016, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 170,
                            Name = "Valeria",
                            NumberOfFights = 7,
                            Surname = "Malahova",
                            Weight = 52.0
                        },
                        new
                        {
                            Id = 16,
                            BornDate = new DateTime(2000, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2016, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 180,
                            Name = "Julia",
                            NumberOfFights = 5,
                            Surname = "Belikova",
                            Weight = 63.0
                        },
                        new
                        {
                            Id = 17,
                            BornDate = new DateTime(1990, 7, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 3,
                            DateOfEntry = new DateTime(2010, 7, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 0,
                            Height = 174,
                            Name = "Tatyana",
                            NumberOfFights = 10,
                            Surname = "Lelikova",
                            Weight = 57.0
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMedCertificateRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Moscow",
                            Country = "Russia",
                            Date = new DateTime(2021, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = true,
                            Name = "Moscow junior boxing championship"
                        },
                        new
                        {
                            Id = 2,
                            City = "Voronezh",
                            Country = "Russia",
                            Date = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = false,
                            Name = "Voronezh Boxing League"
                        },
                        new
                        {
                            Id = 3,
                            City = "Gomel",
                            Country = "Belarus",
                            Date = new DateTime(2021, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = true,
                            Name = "International  Boxing Competition"
                        },
                        new
                        {
                            Id = 4,
                            City = "St. Petersburg",
                            Country = "Russia",
                            Date = new DateTime(2021, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = false,
                            Name = "International boxing tournament - Cup of the Governor of St. Petersburg"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.TournamentRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("StudentHeight")
                        .HasColumnType("int");

                    b.Property<int?>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("StudentWeight")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.MedicalCertificate", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.Student", "Student")
                        .WithMany("MedicalCertificates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.BoxingGroup", "BoxingGroup")
                        .WithMany("Students")
                        .HasForeignKey("BoxingGroupId");

                    b.Navigation("BoxingGroup");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.TournamentRequest", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.Student", "Student")
                        .WithMany("TournamentRequests")
                        .HasForeignKey("StudentId");

                    b.HasOne("BoxingClub.DAL.Entities.Tournament", "Tournament")
                        .WithMany("TournamentRequests")
                        .HasForeignKey("TournamentId");

                    b.Navigation("Student");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.Navigation("MedicalCertificates");

                    b.Navigation("TournamentRequests");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Tournament", b =>
                {
                    b.Navigation("TournamentRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
