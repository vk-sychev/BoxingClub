// <auto-generated />
using System;
using BoxingClub.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoxingClub.DAL.Migrations
{
    [DbContext(typeof(BoxingClubContext))]
    [Migration("20210521151650_AddCustomIdentityEntities")]
    partial class AddCustomIdentityEntities
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoxingClub.DAL.Entities.AgeCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EndAge")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartAge")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AgeCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndAge = 16,
                            Name = "15-16 years old",
                            StartAge = 15
                        },
                        new
                        {
                            Id = 2,
                            EndAge = 18,
                            Name = "Juniors",
                            StartAge = 17
                        },
                        new
                        {
                            Id = 3,
                            EndAge = 40,
                            Name = "Adults",
                            StartAge = 19
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.AgeWeightCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeCategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("WeightCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("WeightCategoryId");

                    b.ToTable("AgeWeightCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeCategoryId = 2,
                            WeightCategoryId = 1
                        },
                        new
                        {
                            Id = 2,
                            AgeCategoryId = 2,
                            WeightCategoryId = 2
                        },
                        new
                        {
                            Id = 3,
                            AgeCategoryId = 2,
                            WeightCategoryId = 3
                        },
                        new
                        {
                            Id = 4,
                            AgeCategoryId = 2,
                            WeightCategoryId = 4
                        },
                        new
                        {
                            Id = 5,
                            AgeCategoryId = 2,
                            WeightCategoryId = 5
                        },
                        new
                        {
                            Id = 6,
                            AgeCategoryId = 2,
                            WeightCategoryId = 6
                        },
                        new
                        {
                            Id = 7,
                            AgeCategoryId = 2,
                            WeightCategoryId = 7
                        },
                        new
                        {
                            Id = 8,
                            AgeCategoryId = 1,
                            WeightCategoryId = 8
                        },
                        new
                        {
                            Id = 9,
                            AgeCategoryId = 1,
                            WeightCategoryId = 9
                        },
                        new
                        {
                            Id = 10,
                            AgeCategoryId = 1,
                            WeightCategoryId = 10
                        },
                        new
                        {
                            Id = 11,
                            AgeCategoryId = 3,
                            WeightCategoryId = 1
                        },
                        new
                        {
                            Id = 12,
                            AgeCategoryId = 3,
                            WeightCategoryId = 2
                        },
                        new
                        {
                            Id = 13,
                            AgeCategoryId = 3,
                            WeightCategoryId = 3
                        },
                        new
                        {
                            Id = 14,
                            AgeCategoryId = 3,
                            WeightCategoryId = 4
                        },
                        new
                        {
                            Id = 15,
                            AgeCategoryId = 3,
                            WeightCategoryId = 5
                        },
                        new
                        {
                            Id = 16,
                            AgeCategoryId = 3,
                            WeightCategoryId = 6
                        },
                        new
                        {
                            Id = 17,
                            AgeCategoryId = 3,
                            WeightCategoryId = 7
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "fda7dfec-9828-41b2-bd9c-53dccbef2bb8",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "97db3428-6252-4adc-82be-fd647b0cdf78",
                            Email = "Manager1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER1@GMAIL.COM",
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEEMCmfo3dSaPwTGpzm6few+wj9ihFCigNnlraYLzb7WH36nrBhOhXEm7XyKLwv1/Vg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5824ceff-87b9-4c92-b470-13e189a3873b",
                            TwoFactorEnabled = false,
                            UserName = "Manager1"
                        },
                        new
                        {
                            Id = "2d4254a5-7782-4b9c-a987-42a83d30669a",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "34c11eb2-dff9-4e53-ac95-e50fce218148",
                            Email = "Manager2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER2@GMAIL.COM",
                            NormalizedUserName = "MANAGER2",
                            PasswordHash = "AQAAAAEAACcQAAAAENaL6oOR2H0cpq+EEdfCa1iUfmued/ICKFo5pntkpuyUQslUon4Y0YCIKqjLQC5EoA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "03ade30c-3cfd-4c73-989b-bc3bee4e9c91",
                            TwoFactorEnabled = false,
                            UserName = "Manager2"
                        },
                        new
                        {
                            Id = "7dc730f1-78ec-41f5-a079-7d5e5d6b39ef",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "69a7246f-f25a-4f0d-b644-73de1fa42f42",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vasya",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEHKAeUKEDze2CQM2tZED8t9SqkpLy7TWHIs5CaGIt/aSetGKyKULmNlsVgQvsnALIw==",
                            Patronymic = "Konstantinovich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "513c2b38-5e4e-4474-8e08-6d0f40787320",
                            Surname = "Sychev",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "f64ffe76-7d0f-43d7-bc1c-b72b028f699d",
                            Description = "CMS in boxing",
                            Email = "Coach1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pavel",
                            NormalizedEmail = "COACH1@GMAIL.COM",
                            NormalizedUserName = "COACH1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPQ/YpKDWdkaMr9pvZ55eaJnGiS0D8uuf4vnLAKFi4Bu+7Wa4K0B0iOGC4PuF/JwwQ==",
                            Patronymic = "Nikolayevich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d94f63a-0cd7-4b83-96bf-c0d7655e6b35",
                            Surname = "Dorochin",
                            TwoFactorEnabled = false,
                            UserName = "Coach1"
                        },
                        new
                        {
                            Id = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1991, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "00d3805f-9d96-4e28-8931-6071c6833a7b",
                            Description = "CMS in boxing",
                            Email = "Coach2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vlad",
                            NormalizedEmail = "COACH2@GMAIL.COM",
                            NormalizedUserName = "COACH2",
                            PasswordHash = "AQAAAAEAACcQAAAAEBNX5AceCCXlj+hopvxv9z/bgq70gBIxu1xelIKSVIsLLqsfEOcJju1Agsyqh4i5ng==",
                            Patronymic = "Nikolayevich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "632c2453-60b9-450e-91ee-1bc34cedd921",
                            Surname = "Dorochin",
                            TwoFactorEnabled = false,
                            UserName = "Coach2"
                        },
                        new
                        {
                            Id = "a50a06a5-df07-4728-b6a0-93173c2ce4cf",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1970, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "78a2d369-c976-4c0c-b454-cb4fc6217fb8",
                            Description = "MS in boxing",
                            Email = "Coach3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Sergey",
                            NormalizedEmail = "COACH3@GMAIL.COM",
                            NormalizedUserName = "COACH3",
                            PasswordHash = "AQAAAAEAACcQAAAAELigIBDYb9DyV9udqYPd+jc/65QhPi14WHCZArIwCr2NpcP+69OU9Eccjm4sS+C7Qg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "37646ce0-6169-4afb-ba30-40067aaa0dae",
                            Surname = "Goncharov",
                            TwoFactorEnabled = false,
                            UserName = "Coach3"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("BoxingGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            Name = "Vityaz"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            Name = "Warrior"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            Name = "Sarmat"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AgeWeightCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AgeWeightCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AgeWeightCategoryId = 8,
                            Gender = 1
                        },
                        new
                        {
                            Id = 2,
                            AgeWeightCategoryId = 9,
                            Gender = 1
                        },
                        new
                        {
                            Id = 3,
                            AgeWeightCategoryId = 10,
                            Gender = 1
                        },
                        new
                        {
                            Id = 4,
                            AgeWeightCategoryId = 8,
                            Gender = 0
                        },
                        new
                        {
                            Id = 5,
                            AgeWeightCategoryId = 9,
                            Gender = 0
                        },
                        new
                        {
                            Id = 6,
                            AgeWeightCategoryId = 10,
                            Gender = 0
                        },
                        new
                        {
                            Id = 7,
                            AgeWeightCategoryId = 1,
                            Gender = 1
                        },
                        new
                        {
                            Id = 8,
                            AgeWeightCategoryId = 2,
                            Gender = 1
                        },
                        new
                        {
                            Id = 9,
                            AgeWeightCategoryId = 3,
                            Gender = 1
                        },
                        new
                        {
                            Id = 10,
                            AgeWeightCategoryId = 4,
                            Gender = 1
                        },
                        new
                        {
                            Id = 11,
                            AgeWeightCategoryId = 5,
                            Gender = 0
                        },
                        new
                        {
                            Id = 12,
                            AgeWeightCategoryId = 6,
                            Gender = 0
                        },
                        new
                        {
                            Id = 13,
                            AgeWeightCategoryId = 7,
                            Gender = 0
                        },
                        new
                        {
                            Id = 14,
                            AgeWeightCategoryId = 11,
                            Gender = 1
                        },
                        new
                        {
                            Id = 15,
                            AgeWeightCategoryId = 12,
                            Gender = 1
                        },
                        new
                        {
                            Id = 16,
                            AgeWeightCategoryId = 13,
                            Gender = 1
                        },
                        new
                        {
                            Id = 17,
                            AgeWeightCategoryId = 14,
                            Gender = 1
                        },
                        new
                        {
                            Id = 18,
                            AgeWeightCategoryId = 15,
                            Gender = 0
                        },
                        new
                        {
                            Id = 19,
                            AgeWeightCategoryId = 16,
                            Gender = 0
                        },
                        new
                        {
                            Id = 20,
                            AgeWeightCategoryId = 17,
                            Gender = 0
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.MedicalCertificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClinicName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<int>("Result")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("MedicalCertificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClinicName = "Polyclinic 4",
                            DateOfIssue = new DateTime(2021, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 2,
                            ClinicName = "Polyclinic 4",
                            DateOfIssue = new DateTime(2020, 5, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 3,
                            ClinicName = "Polyclinic 13",
                            DateOfIssue = new DateTime(2019, 10, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 1
                        },
                        new
                        {
                            Id = 4,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2018, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 5,
                            ClinicName = "VODC",
                            DateOfIssue = new DateTime(2021, 4, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            StudentId = 2
                        },
                        new
                        {
                            Id = 6,
                            ClinicName = "Polyclinic 4",
                            DateOfIssue = new DateTime(2020, 12, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 0,
                            StudentId = 3
                        },
                        new
                        {
                            Id = 7,
                            ClinicName = "Polyclinic 1",
                            DateOfIssue = new DateTime(2021, 5, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Result = 1,
                            StudentId = 3
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BoxingGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfFights")
                        .HasColumnType("int");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BoxingGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BornDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 175,
                            Name = "Vasiliy",
                            NumberOfFights = 3,
                            Patronymic = "Konstantinovich",
                            Surname = "Sychev",
                            Weight = 88.0
                        },
                        new
                        {
                            Id = 2,
                            BornDate = new DateTime(1991, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2019, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 180,
                            Name = "Igor",
                            NumberOfFights = 5,
                            Surname = "Zhuravlev",
                            Weight = 87.0
                        },
                        new
                        {
                            Id = 3,
                            BornDate = new DateTime(2001, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2020, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 175,
                            Name = "Ivan",
                            NumberOfFights = 2,
                            Surname = "Pavlov",
                            Weight = 81.0
                        },
                        new
                        {
                            Id = 4,
                            BornDate = new DateTime(2000, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEntry = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Gender = 1,
                            Height = 176,
                            Name = "Andrew",
                            NumberOfFights = 10,
                            Patronymic = "Sergeevich",
                            Surname = "Solovyev",
                            Weight = 73.0
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsMedCertificateRequired")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tournaments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Moscow",
                            Country = "Russia",
                            Date = new DateTime(2021, 6, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = true,
                            Name = "Moscow junior boxing championship"
                        },
                        new
                        {
                            Id = 2,
                            City = "Voronezh",
                            Country = "Russia",
                            Date = new DateTime(2021, 8, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = false,
                            Name = "Voronezh Boxing League"
                        },
                        new
                        {
                            Id = 3,
                            City = "Gomel",
                            Country = "Belarus",
                            Date = new DateTime(2021, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = true,
                            Name = "International Women's Boxing Competition"
                        },
                        new
                        {
                            Id = 4,
                            City = "St. Petersburg",
                            Country = "Russia",
                            Date = new DateTime(2021, 10, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsMedCertificateRequired = false,
                            Name = "International boxing tournament - Cup of the Governor of St. Petersburg"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.TournamentRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentRequirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 7,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 8,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 9,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 10,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 11,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 12,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 13,
                            TournamentId = 1
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 7,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 8,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 9,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 10,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 14,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 15,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 16,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 17,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 2,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 3,
                            TournamentId = 2
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 18,
                            TournamentId = 3
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 19,
                            TournamentId = 3
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 20,
                            TournamentId = 3
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 4,
                            TournamentId = 4
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 5,
                            TournamentId = 4
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 6,
                            TournamentId = 4
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            TournamentId = 4
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 2,
                            TournamentId = 4
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 3,
                            TournamentId = 4
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.WeightCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EndWeight")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StartWeight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("WeightCategories");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            EndWeight = 91,
                            Name = "Heavyweight",
                            StartWeight = 81
                        },
                        new
                        {
                            Id = 1,
                            EndWeight = 60,
                            Name = "Lightweight",
                            StartWeight = 56
                        },
                        new
                        {
                            Id = 2,
                            EndWeight = 75,
                            Name = "Middleweight",
                            StartWeight = 69
                        },
                        new
                        {
                            Id = 4,
                            Name = "Super heavyweight",
                            StartWeight = 91
                        },
                        new
                        {
                            Id = 7,
                            Name = "Heavyweight",
                            StartWeight = 81
                        },
                        new
                        {
                            Id = 5,
                            EndWeight = 60,
                            Name = "Lightweight",
                            StartWeight = 57
                        },
                        new
                        {
                            Id = 6,
                            EndWeight = 75,
                            Name = "Middleweight",
                            StartWeight = 69
                        },
                        new
                        {
                            Id = 10,
                            Name = "Heavyweight",
                            StartWeight = 80
                        },
                        new
                        {
                            Id = 8,
                            EndWeight = 63,
                            Name = "Lightweight",
                            StartWeight = 60
                        },
                        new
                        {
                            Id = 9,
                            EndWeight = 75,
                            Name = "Middleweight",
                            StartWeight = 70
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "291c0120-8c27-47c5-83fe-9d7deb36f73c",
                            ConcurrencyStamp = "0578fa02-59b6-4d71-ac94-a4fa31899643",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6",
                            ConcurrencyStamp = "0bb5f543-5495-44af-958f-8540a09ea1db",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "db460306-31c6-457a-989e-9e4317be99b9",
                            ConcurrencyStamp = "c19f2a97-1ea5-4ce0-9102-a36292708cac",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8da509ca-2005-457d-8ca3-105792f04013",
                            ConcurrencyStamp = "ddd55c4c-eec8-4ab8-bc2d-463e28319460",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.ToTable("IdentityUserRole<string>");

                    b.HasData(
                        new
                        {
                            UserId = "7dc730f1-78ec-41f5-a079-7d5e5d6b39ef",
                            RoleId = "291c0120-8c27-47c5-83fe-9d7deb36f73c"
                        },
                        new
                        {
                            UserId = "fda7dfec-9828-41b2-bd9c-53dccbef2bb8",
                            RoleId = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6"
                        },
                        new
                        {
                            UserId = "2d4254a5-7782-4b9c-a987-42a83d30669a",
                            RoleId = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6"
                        },
                        new
                        {
                            UserId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        },
                        new
                        {
                            UserId = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        },
                        new
                        {
                            UserId = "a50a06a5-df07-4728-b6a0-93173c2ce4cf",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.AgeWeightCategory", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.AgeCategory", "AgeCategory")
                        .WithMany("AgeWeightCategories")
                        .HasForeignKey("AgeCategoryId");

                    b.HasOne("BoxingClub.DAL.Entities.WeightCategory", "WeightCategory")
                        .WithMany("AgeWeightCategories")
                        .HasForeignKey("WeightCategoryId");

                    b.Navigation("AgeCategory");

                    b.Navigation("WeightCategory");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUserRole", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Category", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.AgeWeightCategory", "AgeWeightCategory")
                        .WithMany()
                        .HasForeignKey("AgeWeightCategoryId");

                    b.Navigation("AgeWeightCategory");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.MedicalCertificate", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.Student", "Student")
                        .WithMany("MedicalCertificates")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.BoxingGroup", "BoxingGroup")
                        .WithMany("Students")
                        .HasForeignKey("BoxingGroupId");

                    b.Navigation("BoxingGroup");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.TournamentRequirement", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.Category", "Category")
                        .WithMany("TournamentRequirements")
                        .HasForeignKey("CategoryId");

                    b.HasOne("BoxingClub.DAL.Entities.Tournament", "Tournament")
                        .WithMany("TournamentRequirements")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.AgeCategory", b =>
                {
                    b.Navigation("AgeWeightCategories");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Category", b =>
                {
                    b.Navigation("TournamentRequirements");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.Navigation("MedicalCertificates");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Tournament", b =>
                {
                    b.Navigation("TournamentRequirements");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.WeightCategory", b =>
                {
                    b.Navigation("AgeWeightCategories");
                });
#pragma warning restore 612, 618
        }
    }
}
