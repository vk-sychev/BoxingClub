// <auto-generated />
using System;
using BoxingClub.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BoxingClub.DAL.Migrations
{
    [DbContext(typeof(BoxingClubContext))]
    [Migration("20210421092600_ChahgedConstraint-FK_BoxingGroups_AspNetUsers_CoachId")]
    partial class ChahgedConstraintFK_BoxingGroups_AspNetUsers_CoachId
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BoxingClub.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "fda7dfec-9828-41b2-bd9c-53dccbef2bb8",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "0739fdbe-38c7-459f-b604-ce65d429a03f",
                            Email = "Manager1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER1@GMAIL.COM",
                            NormalizedUserName = "MANAGER1",
                            PasswordHash = "AQAAAAEAACcQAAAAEPhyo0R1nIlsZVNqybNk66NE3001yz5uNGiPM9uT8gVmnH5xFrAJQy8wb34RY/swnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ba9f4ab-86b6-4470-ab72-5d8cad349211",
                            TwoFactorEnabled = false,
                            UserName = "Manager1"
                        },
                        new
                        {
                            Id = "2d4254a5-7782-4b9c-a987-42a83d30669a",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "e5ca49a5-ed18-48a8-9d1b-271a0f953af8",
                            Email = "Manager2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MANAGER2@GMAIL.COM",
                            NormalizedUserName = "MANAGER2",
                            PasswordHash = "AQAAAAEAACcQAAAAEK3wFwSKTjyLwr4iPzwqPfsuf5O26PELvzhm9jjGojPsOBLyKw6CwEqacOPo2iNYPQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "72b9016a-7d8d-4254-aa29-67a43fbe1cab",
                            TwoFactorEnabled = false,
                            UserName = "Manager2"
                        },
                        new
                        {
                            Id = "7dc730f1-78ec-41f5-a079-7d5e5d6b39ef",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "9dd75091-e0cc-4740-9a1a-c6d35b890c04",
                            Email = "Admin@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vasya",
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAECgI92P8VujP9uCLP4zxOVsZDpFB33dGTX49H/sJlLoxezev9TJi93xDE2Xy+CivOQ==",
                            Patronymic = "Konstantinovich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3e0a919-2445-4613-ba4c-87fd479d69e4",
                            Surname = "Sychev",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1995, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "07fd3660-9d76-4947-8d7d-385c5c2e2fcb",
                            Description = "CMS in boxing",
                            Email = "Coach1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Pavel",
                            NormalizedEmail = "COACH1@GMAIL.COM",
                            NormalizedUserName = "COACH1",
                            PasswordHash = "AQAAAAEAACcQAAAAEITZPw3AyzYPYcs1mCJ/e3SBj+OdAAsc+jwVIjEzg5Rwbt+OsUxWvW1VEUSYCwjanA==",
                            Patronymic = "Nikolayevich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e227d00d-30bb-4dc5-aab5-6ffa08337069",
                            Surname = "Dorochin",
                            TwoFactorEnabled = false,
                            UserName = "Coach1"
                        },
                        new
                        {
                            Id = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1991, 7, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "b66d0918-3e0c-4a85-98e1-474958467e11",
                            Description = "CMS in boxing",
                            Email = "Coach2@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Vlad",
                            NormalizedEmail = "COACH2@GMAIL.COM",
                            NormalizedUserName = "COACH2",
                            PasswordHash = "AQAAAAEAACcQAAAAEFVyCuOk4U1+Jf6WK8raXK+AJE9rLNVn1yDr0yL9f1JY3JpYrLrF1SS1FmkC7Hc9rQ==",
                            Patronymic = "Nikolayevich",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ffd7e1c8-05ff-4dab-b665-1afbd7fcafa3",
                            Surname = "Dorochin",
                            TwoFactorEnabled = false,
                            UserName = "Coach2"
                        },
                        new
                        {
                            Id = "a50a06a5-df07-4728-b6a0-93173c2ce4cf",
                            AccessFailedCount = 0,
                            BornDate = new DateTime(1970, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "6fab8cd9-8ea6-412b-9aff-aa1c420223f3",
                            Description = "MS in boxing",
                            Email = "Coach3@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            Name = "Sergey",
                            NormalizedEmail = "COACH3@GMAIL.COM",
                            NormalizedUserName = "COACH3",
                            PasswordHash = "AQAAAAEAACcQAAAAEKLbupNN8dkUiy6/oxsGr/aQRpNVAFRrBUlcjiP9+CCqBggTXUFXqa3ekayOjxwHGA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "58f175a0-2406-4c6e-ada1-d6c8c2d6dbd5",
                            Surname = "Goncharov",
                            TwoFactorEnabled = false,
                            UserName = "Coach3"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoachId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("BoxingGroups");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CoachId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            Name = "Vityaz"
                        },
                        new
                        {
                            Id = 2,
                            CoachId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            Name = "Warrior"
                        },
                        new
                        {
                            Id = 3,
                            CoachId = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            Name = "Sarmat"
                        });
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("BornDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("BoxingGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Patronymic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("BoxingGroupId");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BornDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2020, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 175,
                            Name = "Vasiliy",
                            Patronymic = "Konstantinovich",
                            Surname = "Sychev",
                            Weight = 88.0
                        },
                        new
                        {
                            Id = 2,
                            BornDate = new DateTime(1991, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 2,
                            DateOfEntry = new DateTime(2019, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 180,
                            Name = "Igor",
                            Surname = "Zhuravlev",
                            Weight = 87.0
                        },
                        new
                        {
                            Id = 3,
                            BornDate = new DateTime(2001, 10, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            BoxingGroupId = 1,
                            DateOfEntry = new DateTime(2020, 2, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 175,
                            Name = "Ivan",
                            Surname = "Pavlov",
                            Weight = 81.0
                        },
                        new
                        {
                            Id = 4,
                            BornDate = new DateTime(2000, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateOfEntry = new DateTime(2021, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Height = 176,
                            Name = "Andrew",
                            Patronymic = "Sergeevich",
                            Surname = "Solovyev",
                            Weight = 73.0
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "291c0120-8c27-47c5-83fe-9d7deb36f73c",
                            ConcurrencyStamp = "2fbab170-00ae-4807-a502-303dd94a206b",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6",
                            ConcurrencyStamp = "2597e345-62a5-41a6-af54-2bb3d8e3487f",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "db460306-31c6-457a-989e-9e4317be99b9",
                            ConcurrencyStamp = "f5386a0a-b41c-45f1-a556-f369abd2077b",
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = "8da509ca-2005-457d-8ca3-105792f04013",
                            ConcurrencyStamp = "1fdf0365-1bab-4634-8da8-c7d12f5ffefa",
                            Name = "Coach",
                            NormalizedName = "COACH"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "7dc730f1-78ec-41f5-a079-7d5e5d6b39ef",
                            RoleId = "291c0120-8c27-47c5-83fe-9d7deb36f73c"
                        },
                        new
                        {
                            UserId = "fda7dfec-9828-41b2-bd9c-53dccbef2bb8",
                            RoleId = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6"
                        },
                        new
                        {
                            UserId = "2d4254a5-7782-4b9c-a987-42a83d30669a",
                            RoleId = "7bb8b4c7-de76-4b77-b5cf-ce4ef11d83a6"
                        },
                        new
                        {
                            UserId = "19759de3-ce1d-4cfd-8340-4e64eb245eb4",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        },
                        new
                        {
                            UserId = "060342c3-9dc3-4597-bae1-9f19c991ebe9",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        },
                        new
                        {
                            UserId = "a50a06a5-df07-4728-b6a0-93173c2ce4cf",
                            RoleId = "8da509ca-2005-457d-8ca3-105792f04013"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.Student", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.BoxingGroup", "BoxingGroup")
                        .WithMany("Students")
                        .HasForeignKey("BoxingGroupId");

                    b.Navigation("BoxingGroup");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BoxingClub.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BoxingClub.DAL.Entities.BoxingGroup", b =>
                {
                    b.Navigation("Students");
                });
#pragma warning restore 612, 618
        }
    }
}
